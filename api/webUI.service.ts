/**
 * ESI Meta Spec
 * ESI specs and miscellaneous routes
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class WebUIService {

    protected basePath = 'https://esi.evetech.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * SwaggerUI route (v2)
     * ESI dev web UI. Note that this is a legacy (v2) SwaggerUI route, which will someday be removed. You can get mostly the same functionality by going to https://esi.evetech.net/ui/?version&#x3D;dev
     * @param user_agent Client identifier, takes precedence over headers
     * @param X_User_Agent Client identifier, takes precedence over User-Agent
     * @param datasource The server name you would like data from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDev(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getDev(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getDev(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getDev(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user_agent !== undefined && user_agent !== null) {
            queryParameters = queryParameters.set('user_agent', <any>user_agent);
        }
        if (datasource !== undefined && datasource !== null) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }

        let headers = this.defaultHeaders;
        if (X_User_Agent !== undefined && X_User_Agent !== null) {
            headers = headers.set('X-User-Agent', String(X_User_Agent));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/dev/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Diff route
     * Diff two ESI specs
     * @param version_a Swagger spec version to compare with
     * @param version_b Swagger spec version to compare against
     * @param user_agent Client identifier, takes precedence over headers
     * @param X_User_Agent Client identifier, takes precedence over User-Agent
     * @param datasource The server name you would like data from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDiffVersionAVersionB(version_a: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', version_b: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getDiffVersionAVersionB(version_a: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', version_b: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getDiffVersionAVersionB(version_a: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', version_b: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getDiffVersionAVersionB(version_a: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', version_b: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (version_a === null || version_a === undefined) {
            throw new Error('Required parameter version_a was null or undefined when calling getDiffVersionAVersionB.');
        }

        if (version_b === null || version_b === undefined) {
            throw new Error('Required parameter version_b was null or undefined when calling getDiffVersionAVersionB.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user_agent !== undefined && user_agent !== null) {
            queryParameters = queryParameters.set('user_agent', <any>user_agent);
        }
        if (datasource !== undefined && datasource !== null) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }

        let headers = this.defaultHeaders;
        if (X_User_Agent !== undefined && X_User_Agent !== null) {
            headers = headers.set('X-User-Agent', String(X_User_Agent));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/diff/${encodeURIComponent(String(version_a))}/${encodeURIComponent(String(version_b))}/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SwaggerUI route (v2)
     * ESI latest web UI. Note that this is a legacy (v2) SwaggerUI route, which will someday be removed. You can get mostly the same functionality by going to https://esi.evetech.net/ui/?version&#x3D;latest
     * @param user_agent Client identifier, takes precedence over headers
     * @param X_User_Agent Client identifier, takes precedence over User-Agent
     * @param datasource The server name you would like data from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLatest(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getLatest(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getLatest(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getLatest(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user_agent !== undefined && user_agent !== null) {
            queryParameters = queryParameters.set('user_agent', <any>user_agent);
        }
        if (datasource !== undefined && datasource !== null) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }

        let headers = this.defaultHeaders;
        if (X_User_Agent !== undefined && X_User_Agent !== null) {
            headers = headers.set('X-User-Agent', String(X_User_Agent));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/latest/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SwaggerUI route (v2)
     * ESI legacy web UI. Note that this is a legacy (v2) SwaggerUI route, which will someday be removed. You can get mostly the same functionality by going to https://esi.evetech.net/ui/?version&#x3D;legacy
     * @param user_agent Client identifier, takes precedence over headers
     * @param X_User_Agent Client identifier, takes precedence over User-Agent
     * @param datasource The server name you would like data from
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLegacy(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getLegacy(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getLegacy(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getLegacy(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user_agent !== undefined && user_agent !== null) {
            queryParameters = queryParameters.set('user_agent', <any>user_agent);
        }
        if (datasource !== undefined && datasource !== null) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }

        let headers = this.defaultHeaders;
        if (X_User_Agent !== undefined && X_User_Agent !== null) {
            headers = headers.set('X-User-Agent', String(X_User_Agent));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/legacy/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * SwaggerUI route (v3)
     * ESI web UI. This is an open source project. If you find ESI web UI specific bugs, please report them to https://github.com/esi/esi-swagger-ui/issues
     * @param user_agent Client identifier, takes precedence over headers
     * @param X_User_Agent Client identifier, takes precedence over User-Agent
     * @param datasource The server name you would like data from
     * @param version The Swagger spec version to display
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUi(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', version?: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getUi(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', version?: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getUi(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', version?: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getUi(user_agent?: string, X_User_Agent?: string, datasource?: 'tranquility' | 'singularity', version?: '_dev' | '_latest' | '_legacy' | 'dev' | 'latest' | 'legacy' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5' | 'v6', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (user_agent !== undefined && user_agent !== null) {
            queryParameters = queryParameters.set('user_agent', <any>user_agent);
        }
        if (datasource !== undefined && datasource !== null) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }

        let headers = this.defaultHeaders;
        if (X_User_Agent !== undefined && X_User_Agent !== null) {
            headers = headers.set('X-User-Agent', String(X_User_Agent));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html; charset=utf-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/ui/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
